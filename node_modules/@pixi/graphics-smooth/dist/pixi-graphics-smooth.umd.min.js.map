{"version":3,"file":"pixi-graphics-smooth.umd.min.js","sources":["../src/core/SegmentPacker.ts","../src/shapes/RoundedRectangleBuilder.ts","../src/shapes/PolyBuilder.ts","../src/SmoothShader.ts"],"sourcesContent":["import { BuildData } from './BuildData';\r\nimport { JOINT_TYPE } from './const';\r\n\r\nexport class SegmentPacker\r\n{\r\n    static vertsByJoint: Array<number> = [];\r\n\r\n    strideFloats = 12;\r\n\r\n    updateBufferSize(jointStart: number, jointLen: number, triangles: number, target: BuildData): void\r\n    {\r\n        const { joints } = target;\r\n        let foundTriangle = false;\r\n\r\n        let vertexSize = 0;\r\n        let indexSize = 0;\r\n\r\n        for (let i = jointStart; i < jointStart + jointLen; i++)\r\n        {\r\n            const prevCap = joints[i] & ~31;\r\n            const joint = joints[i] & 31;\r\n\r\n            if (joint === JOINT_TYPE.FILL)\r\n            {\r\n                foundTriangle = true;\r\n                vertexSize++;\r\n                continue;\r\n            }\r\n\r\n            if (joint >= JOINT_TYPE.FILL_EXPAND)\r\n            {\r\n                vertexSize += 3;\r\n                indexSize += 3;\r\n                continue;\r\n            }\r\n\r\n            const vs = SegmentPacker.vertsByJoint[joint] + SegmentPacker.vertsByJoint[prevCap];\r\n\r\n            if (vs >= 4)\r\n            {\r\n                vertexSize += vs;\r\n                indexSize += 6 + (3 * Math.max(vs - 6, 0));\r\n            }\r\n        }\r\n        if (foundTriangle)\r\n        {\r\n            indexSize += triangles;\r\n        }\r\n\r\n        target.vertexSize += vertexSize;\r\n        target.indexSize += indexSize;\r\n    }\r\n\r\n    bufferPos = 0;\r\n    indexPos = 0;\r\n    bufFloat: Float32Array;\r\n    bufUint: Uint32Array;\r\n    indices: Uint16Array;\r\n    buildData: BuildData;\r\n\r\n    beginPack(buildData: BuildData, bufFloat: Float32Array, bufUint: Uint32Array,\r\n        indices: Uint16Array, bufferPos = 0, indexPos = 0): void\r\n    {\r\n        this.buildData = buildData;\r\n        this.bufFloat = bufFloat;\r\n        this.bufUint = bufUint;\r\n        this.indices = indices;\r\n        this.bufferPos = bufferPos;\r\n        this.indexPos = indexPos;\r\n    }\r\n\r\n    endPack(): void\r\n    {\r\n        this.buildData = null;\r\n        this.bufFloat = null;\r\n        this.bufUint = null;\r\n        this.indices = null;\r\n    }\r\n\r\n    packInterleavedGeometry(jointStart: number, jointLen: number, triangles: number[],\r\n        lineStyle: number, color: number): void\r\n    {\r\n        const { bufFloat, bufUint, indices, buildData, strideFloats } = this;\r\n        const { joints, verts } = buildData;\r\n\r\n        let bufPos = this.bufferPos;\r\n        let indPos = this.indexPos;\r\n        let index = this.bufferPos / this.strideFloats;\r\n\r\n        // eslint-disable-next-line max-len\r\n        let x1: number; let y1: number;\r\n        let x2: number; let y2: number;\r\n        let prevX: number; let prevY: number;\r\n        let nextX: number; let nextY: number;\r\n        // let type: number;\r\n        let hasTriangle = false;\r\n\r\n        let travel = 0;\r\n\r\n        for (let j = jointStart; j < jointStart + jointLen; j++)\r\n        {\r\n            const fullJoint = joints[j];\r\n            const prevCap = joints[j] & ~31;\r\n            const joint = joints[j] & 31;\r\n\r\n            if (joint === JOINT_TYPE.FILL)\r\n            {\r\n                // just one vertex\r\n                hasTriangle = true;\r\n                x1 = verts[(j * 2)];\r\n                y1 = verts[(j * 2) + 1];\r\n                bufFloat[bufPos] = x1;\r\n                bufFloat[bufPos + 1] = y1;\r\n                bufFloat[bufPos + 2] = x1;\r\n                bufFloat[bufPos + 3] = y1;\r\n                bufFloat[bufPos + 4] = x1;\r\n                bufFloat[bufPos + 5] = y1;\r\n                bufFloat[bufPos + 6] = x1;\r\n                bufFloat[bufPos + 7] = y1;\r\n                bufFloat[bufPos + 8] = travel;\r\n                bufFloat[bufPos + 9] = 16 * joint;\r\n                bufFloat[bufPos + 10] = lineStyle;\r\n                bufUint[bufPos + 11] = color;\r\n                bufPos += strideFloats;\r\n                continue;\r\n            }\r\n\r\n            if (joint >= JOINT_TYPE.FILL_EXPAND)\r\n            {\r\n                prevX = verts[j * 2];\r\n                prevY = verts[(j * 2) + 1];\r\n                x1 = verts[(j * 2) + 2];\r\n                y1 = verts[(j * 2) + 3];\r\n                x2 = verts[(j * 2) + 4];\r\n                y2 = verts[(j * 2) + 5];\r\n\r\n                const bis = j + 3;\r\n\r\n                for (let i = 0; i < 3; i++)\r\n                {\r\n                    bufFloat[bufPos] = prevX;\r\n                    bufFloat[bufPos + 1] = prevY;\r\n                    bufFloat[bufPos + 2] = x1;\r\n                    bufFloat[bufPos + 3] = y1;\r\n                    bufFloat[bufPos + 4] = x2;\r\n                    bufFloat[bufPos + 5] = y2;\r\n                    bufFloat[bufPos + 6] = verts[(bis + i) * 2];\r\n                    bufFloat[bufPos + 7] = verts[((bis + i) * 2) + 1];\r\n\r\n                    bufFloat[bufPos + 8] = travel;\r\n                    bufFloat[bufPos + 9] = (16 * fullJoint) + i;\r\n                    bufFloat[bufPos + 10] = lineStyle;\r\n                    bufUint[bufPos + 11] = color;\r\n                    bufPos += strideFloats;\r\n                }\r\n\r\n                indices[indPos] = index;\r\n                indices[indPos + 1] = index + 1;\r\n                indices[indPos + 2] = index + 2;\r\n                indPos += 3;\r\n                index += 3;\r\n                continue;\r\n            }\r\n\r\n            const vs = SegmentPacker.vertsByJoint[joint] + SegmentPacker.vertsByJoint[prevCap];\r\n\r\n            if (vs === 0)\r\n            {\r\n                continue;\r\n            }\r\n            x1 = verts[j * 2];\r\n            y1 = verts[(j * 2) + 1];\r\n            x2 = verts[(j * 2) + 2];\r\n            y2 = verts[(j * 2) + 3];\r\n            // TODO: caps here\r\n            prevX = verts[(j * 2) - 2];\r\n            prevY = verts[(j * 2) - 1];\r\n\r\n            const dist = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\r\n\r\n            if (SegmentPacker.vertsByJoint[joint] === 0)\r\n            {\r\n                travel -= dist;\r\n            }\r\n\r\n            if ((joint & ~2) !== JOINT_TYPE.JOINT_CAP_BUTT)\r\n            {\r\n                nextX = verts[(j * 2) + 4];\r\n                nextY = verts[(j * 2) + 5];\r\n            }\r\n            else\r\n            {\r\n                nextX = x1;\r\n                nextY = y1;\r\n            }\r\n            // type = joint;\r\n\r\n            for (let i = 0; i < vs; i++)\r\n            {\r\n                bufFloat[bufPos] = prevX;\r\n                bufFloat[bufPos + 1] = prevY;\r\n                bufFloat[bufPos + 2] = x1;\r\n                bufFloat[bufPos + 3] = y1;\r\n                bufFloat[bufPos + 4] = x2;\r\n                bufFloat[bufPos + 5] = y2;\r\n                bufFloat[bufPos + 6] = nextX;\r\n                bufFloat[bufPos + 7] = nextY;\r\n                bufFloat[bufPos + 8] = travel;\r\n                bufFloat[bufPos + 9] = (16 * fullJoint) + i;\r\n                bufFloat[bufPos + 10] = lineStyle;\r\n                bufUint[bufPos + 11] = color;\r\n                bufPos += strideFloats;\r\n            }\r\n\r\n            travel += dist;\r\n\r\n            indices[indPos] = index;\r\n            indices[indPos + 1] = index + 1;\r\n            indices[indPos + 2] = index + 2;\r\n            indices[indPos + 3] = index;\r\n            indices[indPos + 4] = index + 2;\r\n            indices[indPos + 5] = index + 3;\r\n            indPos += 6;\r\n            for (let j = 5; j + 1 < vs; j++)\r\n            {\r\n                indices[indPos] = index + 4;\r\n                indices[indPos + 1] = index + j;\r\n                indices[indPos + 2] = index + j + 1;\r\n                indPos += 3;\r\n            }\r\n            index += vs;\r\n        }\r\n\r\n        if (hasTriangle)\r\n        {\r\n            for (let i = 0; i < triangles.length; i++)\r\n            {\r\n                indices[indPos + i] = triangles[i] + index;\r\n            }\r\n            indPos += triangles.length;\r\n        }\r\n\r\n        this.bufferPos = bufPos;\r\n        this.indexPos = indPos;\r\n    }\r\n}\r\n\r\nconst verts = SegmentPacker.vertsByJoint;\r\n\r\nfor (let i = 0; i < 256; i++)\r\n{ verts.push(0); }\r\n// simple fill\r\nverts[JOINT_TYPE.FILL] = 1;\r\n\r\nfor (let i = 0; i < 8; i++)\r\n{\r\n    verts[JOINT_TYPE.FILL_EXPAND + i] = 3;\r\n}\r\n\r\n// no caps for now\r\nverts[JOINT_TYPE.JOINT_BEVEL] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_BEVEL + 1] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_BEVEL + 2] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_BEVEL + 3] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_ROUND] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_ROUND + 1] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_ROUND + 2] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_ROUND + 3] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_MITER] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_MITER + 1] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_MITER + 2] = 4;\r\nverts[JOINT_TYPE.JOINT_MITER + 3] = 4;\r\nverts[JOINT_TYPE.JOINT_CAP_BUTT] = 4;\r\nverts[JOINT_TYPE.JOINT_CAP_BUTT + 1] = 4;\r\nverts[JOINT_TYPE.JOINT_CAP_SQUARE] = 4;\r\nverts[JOINT_TYPE.JOINT_CAP_SQUARE + 1] = 4;\r\nverts[JOINT_TYPE.JOINT_CAP_ROUND] = 4 + 5;\r\nverts[JOINT_TYPE.JOINT_CAP_ROUND + 1] = 4 + 5;\r\n\r\nverts[JOINT_TYPE.CAP_ROUND] = 4;\r\n","import type { IShapeBuilder } from '../core/IShapeBuilder';\nimport { SmoothGraphicsData } from '../core/SmoothGraphicsData';\nimport { BuildData } from '../core/BuildData';\nimport { RoundedRectangle } from '@pixi/math';\nimport { earcut } from '@pixi/utils';\nimport { JOINT_TYPE } from '../core/const';\n\nfunction getPt(n1: number, n2: number, perc: number): number\n{\n    const diff = n2 - n1;\n\n    return n1 + (diff * perc);\n}\n\nfunction quadraticBezierCurve(\n    fromX: number, fromY: number,\n    cpX: number, cpY: number,\n    toX: number, toY: number,\n    out: Array<number> = [],\n    eps = 0.001): Array<number>\n{\n    const n = 20;\n    const points = out;\n\n    let xa = 0;\n    let ya = 0;\n    let xb = 0;\n    let yb = 0;\n    let x = 0;\n    let y = 0;\n\n    for (let i = 0, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n\n        // Handle case when first curve points overlaps and earcut fails to triangulate\n        if (i === 0\n            && Math.abs(x - points[points.length - 2]) < eps\n            && Math.abs(y - points[points.length - 1]) < eps)\n        {\n            continue;\n        }\n\n        points.push(x, y);\n    }\n\n    return points;\n}\n\nexport class RoundedRectangleBuilder implements IShapeBuilder\n{\n    path(graphicsData: SmoothGraphicsData, _target: BuildData)\n    {\n        const rrectData = graphicsData.shape as RoundedRectangle;\n        const { points } = graphicsData;\n        const x = rrectData.x;\n        const y = rrectData.y;\n        const width = rrectData.width;\n        const height = rrectData.height;\n\n        // Don't allow negative radius or greater than half the smallest width\n        const radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\n\n        points.length = 0;\n\n        // No radius, do a simple rectangle\n        if (!radius)\n        {\n            points.push(x, y,\n                x + width, y,\n                x + width, y + height,\n                x, y + height);\n        }\n        else\n        {\n            const eps = _target.closePointEps;\n\n            quadraticBezierCurve(x, y + radius,\n                x, y,\n                x + radius, y,\n                points, eps);\n            quadraticBezierCurve(x + width - radius,\n                y, x + width, y,\n                x + width, y + radius,\n                points, eps);\n            quadraticBezierCurve(x + width, y + height - radius,\n                x + width, y + height,\n                x + width - radius, y + height,\n                points, eps);\n            quadraticBezierCurve(x + radius, y + height,\n                x, y + height,\n                x, y + height - radius,\n                points, eps);\n\n            if (points.length >= 4\n                && Math.abs(points[0] - points[points.length - 2]) < eps\n                && Math.abs(points[1] - points[points.length - 1]) < eps)\n            {\n                points.pop();\n                points.pop();\n            }\n        }\n    }\n\n    line(graphicsData: SmoothGraphicsData, target: BuildData): void\n    {\n        const { verts, joints } = target;\n        const { points } = graphicsData;\n\n        const joint = points.length === 8 // we dont need joints for arcs\n            ? graphicsData.goodJointType() : JOINT_TYPE.JOINT_MITER + 3;\n        const len = points.length;\n\n        verts.push(points[len - 2], points[len - 1]);\n        joints.push(JOINT_TYPE.NONE);\n        for (let i = 0; i < len; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n            joints.push(joint);\n        }\n        verts.push(points[0], points[1]);\n        joints.push(JOINT_TYPE.NONE);\n        verts.push(points[2], points[3]);\n        joints.push(JOINT_TYPE.NONE);\n    }\n\n    fill(graphicsData: SmoothGraphicsData, target: BuildData): void\n    {\n        const { verts, joints } = target;\n        const { points } = graphicsData;\n\n        graphicsData.triangles = earcut(points, null, 2);\n\n        for (let i = 0, j = points.length; i < j; i++)\n        {\n            verts.push(points[i], points[++i]);\n            joints.push(JOINT_TYPE.FILL);\n        }\n    }\n}\n","import type { IShapeBuilder } from '../core/IShapeBuilder';\nimport { SmoothGraphicsData } from '../core/SmoothGraphicsData';\nimport { BuildData } from '../core/BuildData';\nimport { JOINT_TYPE } from '../core/const';\nimport { Point, Polygon } from '@pixi/math';\nimport { earcut } from '@pixi/utils';\n\nconst tempArr: Array<number> = [];\n\nexport class PolyBuilder implements IShapeBuilder\n{\n    path(graphicsData: SmoothGraphicsData, buildData: BuildData)\n    {\n        const shape = graphicsData.shape as Polygon;\n        const points = graphicsData.points = shape.points.slice();\n        const eps = buildData.closePointEps;\n        const eps2 = eps * eps;\n\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        const firstPoint = new Point(points[0], points[1]);\n        const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n        const closedShape = graphicsData.closeStroke = shape.closeStroke;\n\n        let len = points.length;\n        let newLen = 2;\n\n        // 1. remove equal points\n        for (let i = 2; i < len; i += 2)\n        {\n            const x1 = points[i - 2]; const y1 = points[i - 1]; const x2 = points[i]; const\n                y2 = points[i + 1];\n            let flag = true;\n\n            if (Math.abs(x1 - x2) < eps\n                && Math.abs(y1 - y2) < eps)\n            {\n                flag = false;\n            }\n\n            if (flag)\n            {\n                points[newLen] = points[i];\n                points[newLen + 1] = points[i + 1];\n                newLen += 2;\n            }\n        }\n        points.length = len = newLen;\n\n        newLen = 2;\n        // 2. remove middle points\n        for (let i = 2; i + 2 < len; i += 2)\n        {\n            let x1 = points[i - 2]; let y1 = points[i - 1]; const x2 = points[i]; const y2 = points[i + 1];\n            let x3 = points[i + 2]; let\n                y3 = points[i + 3];\n\n            x1 -= x2;\n            y1 -= y2;\n            x3 -= x2;\n            y3 -= y2;\n            let flag = true;\n\n            if (Math.abs(x3 * y1 - y3 * x1) < eps2)\n            {\n                if (x1 * x3 + y1 * y3 < -eps2)\n                {\n                    flag = false;\n                }\n            }\n\n            if (flag)\n            {\n                points[newLen] = points[i];\n                points[newLen + 1] = points[i + 1];\n                newLen += 2;\n            }\n        }\n        points[newLen] = points[len - 2];\n        points[newLen + 1] = points[len - 1];\n        newLen += 2;\n\n        points.length = len = newLen;\n\n        if (len <= 2)\n        {\n            // suddenly, nothing\n            return;\n        }\n\n        if (closedShape)\n        {\n            // first point should be last point in closed line!\n            const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n                && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n            if (closedPath)\n            {\n                points.pop();\n                points.pop();\n            }\n        }\n    }\n\n    line(graphicsData: SmoothGraphicsData, buildData: BuildData)\n    {\n        const { closeStroke, points } = graphicsData;\n        const eps = buildData.closePointEps;\n        // const eps2 = eps * eps;\n        const len = points.length;\n        // const style = graphicsData.lineStyle;\n\n        if (len <= 2)\n        {\n            return;\n        }\n        const { verts, joints } = buildData;\n\n        // TODO: alignment\n\n        const joint = graphicsData.jointType();\n        const cap = graphicsData.capType();\n        let prevCap = 0;\n\n        let prevX: number; let\n            prevY: number;\n\n        if (closeStroke)\n        {\n            prevX = points[len - 2];\n            prevY = points[len - 1];\n            joints.push(JOINT_TYPE.NONE);\n        }\n        else\n        {\n            prevX = points[2];\n            prevY = points[3];\n            if (cap === JOINT_TYPE.CAP_ROUND)\n            {\n                verts.push(points[0], points[1]);\n                joints.push(JOINT_TYPE.NONE);\n                joints.push(JOINT_TYPE.CAP_ROUND);\n                prevCap = 0;\n            }\n            else\n            {\n                prevCap = cap;\n                joints.push(JOINT_TYPE.NONE);\n            }\n        }\n        verts.push(prevX, prevY);\n\n        /* Line segments of interest where (x1,y1) forms the corner. */\n        for (let i = 0; i < len; i += 2)\n        {\n            const x1 = points[i]; const\n                y1 = points[i + 1];\n\n            let x2: number; let\n                y2: number;\n\n            if (i + 2 < len)\n            {\n                x2 = points[i + 2];\n                y2 = points[i + 3];\n            }\n            else\n            {\n                x2 = points[0];\n                y2 = points[1];\n            }\n\n            const dx = x2 - x1;\n            const dy = y2 - y1;\n            let nextX: number; let\n                nextY: number;\n\n            let endJoint = joint;\n\n            if (i + 2 >= len)\n            {\n                nextX = points[2];\n                nextY = points[3];\n                if (!closeStroke)\n                {\n                    endJoint = JOINT_TYPE.NONE;\n                }\n            }\n            else if (i + 4 >= len)\n            {\n                nextX = points[0];\n                nextY = points[1];\n                if (!closeStroke)\n                {\n                    if (cap === JOINT_TYPE.CAP_ROUND)\n                    {\n                        endJoint = JOINT_TYPE.JOINT_CAP_ROUND;\n                    }\n                    if (cap === JOINT_TYPE.CAP_BUTT)\n                    {\n                        endJoint = JOINT_TYPE.JOINT_CAP_BUTT;\n                    }\n                    if (cap === JOINT_TYPE.CAP_SQUARE)\n                    {\n                        endJoint = JOINT_TYPE.JOINT_CAP_SQUARE;\n                    }\n                }\n            }\n            else\n            {\n                nextX = points[i + 4];\n                nextY = points[i + 5];\n            }\n\n            const dx3 = x1 - prevX;\n            const dy3 = y1 - prevY;\n\n            if (joint >= JOINT_TYPE.JOINT_BEVEL && joint <= JOINT_TYPE.JOINT_MITER)\n            {\n                const dx2 = nextX - x2;\n                const dy2 = nextY - y2;\n\n                if (endJoint >= JOINT_TYPE.JOINT_BEVEL\n                    && endJoint <= JOINT_TYPE.JOINT_MITER + 3)\n                {\n                    const D = dx2 * dy - dy2 * dx;\n\n                    if (Math.abs(D) < eps)\n                    {\n                        switch (joint & ~3)\n                        {\n                            case JOINT_TYPE.JOINT_ROUND:\n                                endJoint = JOINT_TYPE.JOINT_CAP_ROUND;\n                                break;\n                            default:\n                                endJoint = JOINT_TYPE.JOINT_CAP_BUTT;\n                                break;\n                        }\n                    }\n                }\n\n                if (joint === JOINT_TYPE.JOINT_MITER)\n                {\n                    let jointAdd = 0;\n\n                    if (dx3 * dx + dy3 * dy > -eps)\n                    {\n                        jointAdd++;\n                    }\n                    if (endJoint === JOINT_TYPE.JOINT_MITER && dx2 * dx + dy2 * dy > -eps)\n                    {\n                        jointAdd += 2;\n                    }\n                    endJoint += jointAdd;\n                }\n            }\n            if (prevCap === 0)\n            {\n                if (Math.abs(dx3 * dy - dy3 * dx) < eps)\n                {\n                    prevCap = JOINT_TYPE.CAP_BUTT2;\n                }\n            }\n            endJoint += prevCap;\n            prevCap = 0;\n\n            verts.push(x1, y1);\n            joints.push(endJoint);\n\n            prevX = x1;\n            prevY = y1;\n        }\n\n        if (closeStroke)\n        {\n            verts.push(points[0], points[1]);\n            joints.push(JOINT_TYPE.NONE);\n            verts.push(points[2], points[3]);\n            joints.push(JOINT_TYPE.NONE);\n        }\n        else\n        {\n            verts.push(points[len - 4], points[len - 3]);\n            joints.push(JOINT_TYPE.NONE);\n        }\n    }\n\n    fill(graphicsData: SmoothGraphicsData, buildData: BuildData)\n    {\n        let points = graphicsData.points;\n        // TODO: simplify holes too!\n        const holes = graphicsData.holes;\n        const eps = buildData.closePointEps;\n\n        const { verts, joints } = buildData;\n\n        if (points.length < 6)\n        {\n            return;\n        }\n        const holeArray = [];\n        let len = points.length;\n        // Process holes..\n\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n\n            holeArray.push(points.length / 2);\n            points = points.concat(hole.points);\n        }\n\n        // TODO: reduce size later?\n        const pn = tempArr;\n\n        if (pn.length < points.length)\n        {\n            pn.length = points.length;\n        }\n        const start = 0;\n\n        for (let i = 0; i <= holeArray.length; i++)\n        {\n            let finish = len / 2;\n\n            if (i > 0)\n            {\n                if (i < holeArray.length)\n                {\n                    finish = holeArray[i];\n                }\n                else\n                {\n                    finish = (points.length >> 1);\n                }\n            }\n            pn[start * 2] = finish - 1;\n            pn[(finish - 1) * 2 + 1] = 0;\n            for (let j = start; j + 1 < finish; j++)\n            {\n                pn[j * 2 + 1] = j + 1;\n                pn[j * 2 + 2] = j;\n            }\n        }\n\n        // sort color\n        graphicsData.triangles = earcut(points, holeArray, 2);\n\n        if (!graphicsData.triangles)\n        {\n            return;\n        }\n\n        if (!graphicsData.fillAA)\n        {\n            for (let i = 0; i < points.length; i += 2)\n            {\n                verts.push(points[i], points[i + 1]);\n                joints.push(JOINT_TYPE.FILL);\n            }\n\n            return;\n        }\n\n        const { triangles } = graphicsData;\n\n        len = points.length;\n\n        for (let i = 0; i < triangles.length; i += 3)\n        {\n            // TODO: holes prev/next!!!\n            let flag = 0;\n\n            for (let j = 0; j < 3; j++)\n            {\n                const ind1 = triangles[i + j];\n                const ind2 = triangles[i + (j + 1) % 3];\n\n                if (pn[ind1 * 2] === ind2 || pn[ind1 * 2 + 1] === ind2)\n                {\n                    flag |= (1 << j);\n                }\n            }\n            joints.push(JOINT_TYPE.FILL_EXPAND + flag);\n            joints.push(JOINT_TYPE.NONE);\n            joints.push(JOINT_TYPE.NONE);\n            joints.push(JOINT_TYPE.NONE);\n            joints.push(JOINT_TYPE.NONE);\n            joints.push(JOINT_TYPE.NONE);\n        }\n\n        // bisect, re-using pn\n        for (let ind = 0; ind < len / 2; ind++)\n        {\n            const prev = pn[ind * 2];\n            const next = pn[ind * 2 + 1];\n            let nx1 = (points[next * 2 + 1] - points[ind * 2 + 1]); let\n                ny1 = -(points[next * 2] - points[ind * 2]);\n            let nx2 = (points[ind * 2 + 1] - points[prev * 2 + 1]); let\n                ny2 = -(points[ind * 2] - points[prev * 2]);\n            const D1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);\n\n            nx1 /= D1;\n            ny1 /= D1;\n            const D2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\n            nx2 /= D2;\n            ny2 /= D2;\n\n            let bx = (nx1 + nx2);\n            let by = (ny1 + ny2);\n            const D = bx * nx1 + by * ny1;\n\n            if (Math.abs(D) < eps)\n            {\n                bx = nx1;\n                by = ny1;\n            }\n            else\n            {\n                bx /= D;\n                by /= D;\n            }\n            pn[ind * 2] = bx;\n            pn[ind * 2 + 1] = by;\n        }\n\n        for (let i = 0; i < triangles.length; i += 3)\n        {\n            const prev = triangles[i];\n            const ind = triangles[i + 1];\n            const next = triangles[i + 2];\n            const nx1 = (points[next * 2 + 1] - points[ind * 2 + 1]); const\n                ny1 = -(points[next * 2] - points[ind * 2]);\n            const nx2 = (points[ind * 2 + 1] - points[prev * 2 + 1]); const\n                ny2 = -(points[ind * 2] - points[prev * 2]);\n\n            let j1 = 1;\n\n            if (nx1 * ny2 - nx2 * ny1 > 0.0)\n            {\n                j1 = 2;\n            }\n\n            for (let j = 0; j < 3; j++)\n            {\n                const ind = triangles[i + (j * j1) % 3];\n\n                verts.push(points[ind * 2], points[ind * 2 + 1]);\n            }\n            for (let j = 0; j < 3; j++)\n            {\n                const ind = triangles[i + (j * j1) % 3];\n\n                verts.push(pn[ind * 2], pn[ind * 2 + 1]);\n            }\n        }\n    }\n}\n","import { Program, Shader } from '@pixi/core';\r\nimport { IGraphicsBatchSettings } from './core/BatchDrawCall';\r\n\r\nconst smoothVert = `#version 100\r\nprecision highp float;\r\nconst float FILL = 1.0;\r\nconst float BEVEL = 4.0;\r\nconst float MITER = 8.0;\r\nconst float ROUND = 12.0;\r\nconst float JOINT_CAP_BUTT = 16.0;\r\nconst float JOINT_CAP_SQUARE = 18.0;\r\nconst float JOINT_CAP_ROUND = 20.0;\r\n\r\nconst float FILL_EXPAND = 24.0;\r\n\r\nconst float CAP_BUTT = 1.0;\r\nconst float CAP_SQUARE = 2.0;\r\nconst float CAP_ROUND = 3.0;\r\nconst float CAP_BUTT2 = 4.0;\r\n\r\nconst float MITER_LIMIT = 10.0;\r\n\r\n// === geom ===\r\nattribute vec2 aPrev;\r\nattribute vec2 aPoint1;\r\nattribute vec2 aPoint2;\r\nattribute vec2 aNext;\r\nattribute float aVertexJoint;\r\nattribute float aTravel;\r\n\r\nuniform mat3 projectionMatrix;\r\nuniform mat3 translationMatrix;\r\nuniform vec4 tint;\r\n\r\nvarying vec4 vLine1;\r\nvarying vec4 vLine2;\r\nvarying vec4 vArc;\r\nvarying float vType;\r\n\r\nuniform float resolution;\r\nuniform float expand;\r\n\r\n// === style ===\r\nattribute float aStyleId;\r\nattribute vec4 aColor;\r\n\r\nvarying float vTextureId;\r\nvarying vec4 vColor;\r\nvarying vec2 vTextureCoord;\r\nvarying float vTravel;\r\n\r\nuniform vec2 styleLine[%MAX_STYLES%];\r\nuniform vec3 styleMatrix[2 * %MAX_STYLES%];\r\nuniform float styleTextureId[%MAX_STYLES%];\r\nuniform vec2 samplerSize[%MAX_TEXTURES%];\r\n\r\nvec2 doBisect(vec2 norm, float len, vec2 norm2, float len2,\r\n    float dy, float inner) {\r\n    vec2 bisect = (norm + norm2) / 2.0;\r\n    bisect /= dot(norm, bisect);\r\n    vec2 shift = dy * bisect;\r\n    if (inner > 0.5) {\r\n        if (len < len2) {\r\n            if (abs(dy * (bisect.x * norm.y - bisect.y * norm.x)) > len) {\r\n                return dy * norm;\r\n            }\r\n        } else {\r\n            if (abs(dy * (bisect.x * norm2.y - bisect.y * norm2.x)) > len2) {\r\n                return dy * norm;\r\n            }\r\n        }\r\n    }\r\n    return dy * bisect;\r\n}\r\n\r\nvoid main(void){\r\n    vec2 pointA = (translationMatrix * vec3(aPoint1, 1.0)).xy;\r\n    vec2 pointB = (translationMatrix * vec3(aPoint2, 1.0)).xy;\r\n\r\n    vec2 xBasis = pointB - pointA;\r\n    float len = length(xBasis);\r\n    vec2 forward = xBasis / len;\r\n    vec2 norm = vec2(forward.y, -forward.x);\r\n\r\n    float type = floor(aVertexJoint / 16.0);\r\n    float vertexNum = aVertexJoint - type * 16.0;\r\n    float dx = 0.0, dy = 1.0;\r\n\r\n    float capType = floor(type / 32.0);\r\n    type -= capType * 32.0;\r\n\r\n    int styleId = int(aStyleId + 0.5);\r\n    float lineWidth = styleLine[styleId].x;\r\n    vTextureId = floor(styleTextureId[styleId] / 4.0);\r\n    float scaleMode = styleTextureId[styleId] - vTextureId * 4.0;\r\n    float avgScale = 1.0;\r\n    if (scaleMode > 2.5) {\r\n        avgScale = length(translationMatrix * vec3(1.0, 0.0, 0.0));\r\n    } else if (scaleMode > 1.5) {\r\n        avgScale = length(translationMatrix * vec3(0.0, 1.0, 0.0));\r\n    } else if (scaleMode > 0.5) {\r\n        vec2 avgDiag = (translationMatrix * vec3(1.0, 1.0, 0.0)).xy;\r\n        avgScale = sqrt(dot(avgDiag, avgDiag) * 0.5);\r\n    }\r\n    lineWidth *= 0.5 * avgScale;\r\n    float lineAlignment = 2.0 * styleLine[styleId].y - 1.0;\r\n    vTextureCoord = vec2(0.0);\r\n\r\n    vec2 pos;\r\n\r\n    if (capType == CAP_ROUND) {\r\n        vertexNum += 4.0;\r\n        type = JOINT_CAP_ROUND;\r\n        capType = 0.0;\r\n        lineAlignment = -lineAlignment;\r\n    }\r\n\r\n    vLine1 = vec4(0.0, 10.0, 1.0, 0.0);\r\n    vLine2 = vec4(0.0, 10.0, 1.0, 0.0);\r\n    vArc = vec4(0.0);\r\n    if (type == FILL) {\r\n        pos = pointA;\r\n        vType = 0.0;\r\n        vLine2 = vec4(-2.0, -2.0, -2.0, 0.0);\r\n        vec2 vTexturePixel;\r\n        vTexturePixel.x = dot(vec3(aPoint1, 1.0), styleMatrix[styleId * 2]);\r\n        vTexturePixel.y = dot(vec3(aPoint1, 1.0), styleMatrix[styleId * 2 + 1]);\r\n        vTextureCoord = vTexturePixel / samplerSize[int(vTextureId)];\r\n    } else if (type >= FILL_EXPAND && type < FILL_EXPAND + 7.5) {\r\n        // expand vertices\r\n        float flags = type - FILL_EXPAND;\r\n        float flag3 = floor(flags / 4.0);\r\n        float flag2 = floor((flags - flag3 * 4.0) / 2.0);\r\n        float flag1 = flags - flag3 * 4.0 - flag2 * 2.0;\r\n\r\n        vec2 prev = (translationMatrix * vec3(aPrev, 1.0)).xy;\r\n\r\n        if (vertexNum < 0.5) {\r\n            pos = prev;\r\n        } else if (vertexNum < 1.5) {\r\n            pos = pointA;\r\n        } else {\r\n            pos = pointB;\r\n        }\r\n        float len2 = length(aNext);\r\n        vec2 bisect = (translationMatrix * vec3(aNext, 0.0)).xy;\r\n        if (len2 > 0.01) {\r\n            bisect = normalize(bisect) * len2;\r\n        }\r\n\r\n        vec2 n1 = normalize(vec2(pointA.y - prev.y, -(pointA.x - prev.x)));\r\n        vec2 n2 = normalize(vec2(pointB.y - pointA.y, -(pointB.x - pointA.x)));\r\n        vec2 n3 = normalize(vec2(prev.y - pointB.y, -(prev.x - pointB.x)));\r\n\r\n        if (n1.x * n2.y - n1.y * n2.x < 0.0) {\r\n            n1 = -n1;\r\n            n2 = -n2;\r\n            n3 = -n3;\r\n        }\r\n        pos += bisect * expand;\r\n\r\n        vLine1 = vec4(16.0, 16.0, 16.0, -1.0);\r\n        if (flag1 > 0.5) {\r\n            vLine1.x = -dot(pos - prev, n1);\r\n        }\r\n        if (flag2 > 0.5) {\r\n            vLine1.y = -dot(pos - pointA, n2);\r\n        }\r\n        if (flag3 > 0.5) {\r\n            vLine1.z = -dot(pos - pointB, n3);\r\n        }\r\n        vLine1.xyz *= resolution;\r\n        vType = 2.0;\r\n    } else if (type >= BEVEL) {\r\n        float dy = lineWidth + expand;\r\n        float shift = lineWidth * lineAlignment;\r\n        float inner = 0.0;\r\n        if (vertexNum >= 1.5) {\r\n            dy = -dy;\r\n            inner = 1.0;\r\n        }\r\n\r\n        vec2 base, next, xBasis2, bisect;\r\n        float flag = 0.0;\r\n        float side2 = 1.0;\r\n        if (vertexNum < 0.5 || vertexNum > 2.5 && vertexNum < 3.5) {\r\n            next = (translationMatrix * vec3(aPrev, 1.0)).xy;\r\n            base = pointA;\r\n            flag = type - floor(type / 2.0) * 2.0;\r\n            side2 = -1.0;\r\n        } else {\r\n            next = (translationMatrix * vec3(aNext, 1.0)).xy;\r\n            base = pointB;\r\n            if (type >= MITER && type < MITER + 3.5) {\r\n                flag = step(MITER + 1.5, type);\r\n                // check miter limit here?\r\n            }\r\n        }\r\n        xBasis2 = next - base;\r\n        float len2 = length(xBasis2);\r\n        vec2 norm2 = vec2(xBasis2.y, -xBasis2.x) / len2;\r\n        float D = norm.x * norm2.y - norm.y * norm2.x;\r\n        if (D < 0.0) {\r\n            inner = 1.0 - inner;\r\n        }\r\n\r\n        norm2 *= side2;\r\n\r\n        float collinear = step(0.0, dot(norm, norm2));\r\n\r\n        vType = 0.0;\r\n        float dy2 = -1000.0;\r\n\r\n        if (abs(D) < 0.01 && collinear < 0.5) {\r\n            if (type >= ROUND && type < ROUND + 1.5) {\r\n                type = JOINT_CAP_ROUND;\r\n            }\r\n            //TODO: BUTT here too\r\n        }\r\n\r\n        vLine1 = vec4(0.0, lineWidth, max(abs(norm.x), abs(norm.y)), min(abs(norm.x), abs(norm.y)));\r\n        vLine2 = vec4(0.0, lineWidth, max(abs(norm2.x), abs(norm2.y)), min(abs(norm2.x), abs(norm2.y)));\r\n\r\n        if (vertexNum < 3.5) {\r\n            if (abs(D) < 0.01) {\r\n                pos = (shift + dy) * norm;\r\n            } else {\r\n                if (flag < 0.5 && inner < 0.5) {\r\n                    pos = (shift + dy) * norm;\r\n                } else {\r\n                    pos = doBisect(norm, len, norm2, len2, shift + dy, inner);\r\n                }\r\n            }\r\n            vLine2.y = -1000.0;\r\n            if (capType >= CAP_BUTT && capType < CAP_ROUND) {\r\n                float extra = step(CAP_SQUARE, capType) * lineWidth;\r\n                vec2 back = -forward;\r\n                if (vertexNum < 0.5 || vertexNum > 2.5) {\r\n                    pos += back * (expand + extra);\r\n                    dy2 = expand;\r\n                } else {\r\n                    dy2 = dot(pos + base - pointA, back) - extra;\r\n                }\r\n            }\r\n            if (type >= JOINT_CAP_BUTT && type < JOINT_CAP_SQUARE + 0.5) {\r\n                float extra = step(JOINT_CAP_SQUARE, type) * lineWidth;\r\n                if (vertexNum < 0.5 || vertexNum > 2.5) {\r\n                    vLine2.y = dot(pos + base - pointB, forward) - extra;\r\n                } else {\r\n                    pos += forward * (expand + extra);\r\n                    vLine2.y = expand;\r\n                    if (capType >= CAP_BUTT) {\r\n                        dy2 -= expand + extra;\r\n                    }\r\n                }\r\n            }\r\n        } else if (type >= JOINT_CAP_ROUND && type < JOINT_CAP_ROUND + 1.5) {\r\n            base += shift * norm;\r\n            if (inner > 0.5) {\r\n                dy = -dy;\r\n                inner = 0.0;\r\n            }\r\n            vec2 d2 = abs(dy) * forward;\r\n            if (vertexNum < 4.5) {\r\n                dy = -dy;\r\n                pos = dy * norm;\r\n            } else if (vertexNum < 5.5) {\r\n                pos = dy * norm;\r\n            } else if (vertexNum < 6.5) {\r\n                pos = dy * norm + d2;\r\n                vArc.x = abs(dy);\r\n            } else {\r\n                dy = -dy;\r\n                pos = dy * norm + d2;\r\n                vArc.x = abs(dy);\r\n            }\r\n            vLine2 = vec4(0.0, lineWidth * 2.0 + 10.0, 1.0  , 0.0); // forget about line2 with type=3\r\n            vArc.y = dy;\r\n            vArc.z = 0.0;\r\n            vArc.w = lineWidth;\r\n            vType = 3.0;\r\n        } else if (abs(D) < 0.01) {\r\n            pos = dy * norm;\r\n        } else {\r\n            if (inner > 0.5) {\r\n                dy = -dy;\r\n                inner = 0.0;\r\n            }\r\n            float side = sign(dy);\r\n            vec2 norm3 = normalize(norm + norm2);\r\n\r\n            if (type >= MITER && type < MITER + 3.5) {\r\n                vec2 farVertex = doBisect(norm, len, norm2, len2, shift + dy, 0.0);\r\n                if (length(farVertex) > abs(shift + dy) * MITER_LIMIT) {\r\n                    type = BEVEL;\r\n                }\r\n            }\r\n\r\n            if (vertexNum < 4.5) {\r\n                pos = doBisect(norm, len, norm2, len2, shift - dy, 1.0);\r\n            } else if (vertexNum < 5.5) {\r\n                pos = (shift + dy) * norm;\r\n            } else if (vertexNum > 7.5) {\r\n                pos = (shift + dy) * norm2;\r\n            } else {\r\n                if (type >= ROUND && type < ROUND + 1.5) {\r\n                    pos = doBisect(norm, len, norm2, len2, shift + dy, 0.0);\r\n                    float d2 = abs(shift + dy);\r\n                    if (length(pos) > abs(shift + dy) * 1.5) {\r\n                        if (vertexNum < 6.5) {\r\n                            pos.x = (shift + dy) * norm.x - d2 * norm.y;\r\n                            pos.y = (shift + dy) * norm.y + d2 * norm.x;\r\n                        } else {\r\n                            pos.x = (shift + dy) * norm2.x + d2 * norm2.y;\r\n                            pos.y = (shift + dy) * norm2.y - d2 * norm2.x;\r\n                        }\r\n                    }\r\n                } else if (type >= MITER && type < MITER + 3.5) {\r\n                    pos = doBisect(norm, len, norm2, len2, shift + dy, 0.0); //farVertex\r\n                } else if (type >= BEVEL && type < BEVEL + 1.5) {\r\n                    float d2 = side / resolution;\r\n                    if (vertexNum < 6.5) {\r\n                        pos = (shift + dy) * norm + d2 * norm3;\r\n                    } else {\r\n                        pos = (shift + dy) * norm2 + d2 * norm3;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (type >= ROUND && type < ROUND + 1.5) {\r\n                vArc.x = side * dot(pos, norm3);\r\n                vArc.y = pos.x * norm3.y - pos.y * norm3.x;\r\n                vArc.z = dot(norm, norm3) * (lineWidth + side * shift);\r\n                vArc.w = lineWidth + side * shift;\r\n                vType = 3.0;\r\n            } else if (type >= MITER && type < MITER + 3.5) {\r\n                vType = 1.0;\r\n            } else if (type >= BEVEL && type < BEVEL + 1.5) {\r\n                vType = 4.0;\r\n                vArc.z = dot(norm, norm3) * (lineWidth + side * shift) - side * dot(pos, norm3);\r\n            }\r\n\r\n            dy = side * (dot(pos, norm) - shift);\r\n            dy2 = side * (dot(pos, norm2) - shift);\r\n        }\r\n\r\n        pos += base;\r\n        vLine1.xy = vec2(dy, vLine1.y) * resolution;\r\n        vLine2.xy = vec2(dy2, vLine2.y) * resolution;\r\n        vArc = vArc * resolution;\r\n        vTravel = aTravel * avgScale + dot(pos - pointA, vec2(-norm.y, norm.x));\r\n    }\r\n\r\n    gl_Position = vec4((projectionMatrix * vec3(pos, 1.0)).xy, 0.0, 1.0);\r\n\r\n    vColor = aColor * tint;\r\n}`;\r\n\r\nconst precision = `#version 100\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  precision highp float;\r\n#else\r\n  precision mediump float;\r\n#endif\r\n`;\r\n\r\nconst smoothFrag = `%PRECISION%\r\nvarying vec4 vColor;\r\nvarying vec4 vLine1;\r\nvarying vec4 vLine2;\r\nvarying vec4 vArc;\r\nvarying float vType;\r\nvarying float vTextureId;\r\nvarying vec2 vTextureCoord;\r\nvarying float vTravel;\r\nuniform sampler2D uSamplers[%MAX_TEXTURES%];\r\n\r\n%PIXEL_LINE%\r\n\r\nvoid main(void){\r\n    %PIXEL_COVERAGE%\r\n\r\n    vec4 texColor;\r\n    float textureId = floor(vTextureId+0.5);\r\n    %FOR_LOOP%\r\n\r\n    gl_FragColor = vColor * texColor * alpha;\r\n}\r\n`;\r\n\r\nconst pixelLineFunc = [`\r\nfloat pixelLine(float x, float A, float B) {\r\n    return clamp(x + 0.5, 0.0, 1.0);\r\n}\r\n`, `\r\nfloat pixelLine(float x, float A, float B) {\r\n    float y = abs(x), s = sign(x);\r\n    if (y * 2.0 < A - B) {\r\n        return 0.5 + s * y / A;\r\n    }\r\n    y -= (A - B) * 0.5;\r\n    y = max(1.0 - y / B, 0.0);\r\n    return (1.0 + s * (1.0 - y * y)) * 0.5;\r\n    //return clamp(x + 0.5, 0.0, 1.0);\r\n}\r\n`];\r\n\r\nconst pixelCoverage = `float alpha = 1.0;\r\nif (vType < 0.5) {\r\n    float left = pixelLine(-vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float right = pixelLine(vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float near = vLine2.x - 0.5;\r\n    float far = min(vLine2.x + 0.5, 0.0);\r\n    float top = vLine2.y - 0.5;\r\n    float bottom = min(vLine2.y + 0.5, 0.0);\r\n    alpha = (right - left) * max(bottom - top, 0.0) * max(far - near, 0.0);\r\n} else if (vType < 1.5) {\r\n    float a1 = pixelLine(- vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float a2 = pixelLine(vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float b1 = pixelLine(- vLine2.y - vLine2.x, vLine2.z, vLine2.w);\r\n    float b2 = pixelLine(vLine2.y - vLine2.x, vLine2.z, vLine2.w);\r\n    alpha = a2 * b2 - a1 * b1;\r\n} else if (vType < 2.5) {\r\n    alpha *= max(min(vLine1.x + 0.5, 1.0), 0.0);\r\n    alpha *= max(min(vLine1.y + 0.5, 1.0), 0.0);\r\n    alpha *= max(min(vLine1.z + 0.5, 1.0), 0.0);\r\n} else if (vType < 3.5) {\r\n    float a1 = pixelLine(- vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float a2 = pixelLine(vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float b1 = pixelLine(- vLine2.y - vLine2.x, vLine2.z, vLine2.w);\r\n    float b2 = pixelLine(vLine2.y - vLine2.x, vLine2.z, vLine2.w);\r\n    float alpha_miter = a2 * b2 - a1 * b1;\r\n    float alpha_plane = clamp(vArc.z - vArc.x + 0.5, 0.0, 1.0);\r\n    float d = length(vArc.xy);\r\n    float circle_hor = max(min(vArc.w, d + 0.5) - max(-vArc.w, d - 0.5), 0.0);\r\n    float circle_vert = min(vArc.w * 2.0, 1.0);\r\n    float alpha_circle = circle_hor * circle_vert;\r\n    alpha = min(alpha_miter, max(alpha_circle, alpha_plane));\r\n} else {\r\n    float a1 = pixelLine(- vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float a2 = pixelLine(vLine1.y - vLine1.x, vLine1.z, vLine1.w);\r\n    float b1 = pixelLine(- vLine2.y - vLine2.x, vLine2.z, vLine2.w);\r\n    float b2 = pixelLine(vLine2.y - vLine2.x, vLine2.z, vLine2.w);\r\n    alpha = a2 * b2 - a1 * b1;\r\n    alpha *= clamp(vArc.z + 0.5, 0.0, 1.0);\r\n}\r\n`;\r\n\r\nexport class SmoothGraphicsProgram extends Program\r\n{\r\n    settings: IGraphicsBatchSettings;\r\n\r\n    constructor(settings: IGraphicsBatchSettings,\r\n        vert = smoothVert,\r\n        frag = smoothFrag,\r\n        _uniforms = {})\r\n    {\r\n        const { maxStyles, maxTextures, pixelLine } = settings;\r\n\r\n        vert = vert.replace(/%MAX_TEXTURES%/gi, `${maxTextures}`)\r\n            .replace(/%MAX_STYLES%/gi, `${maxStyles}`);\r\n        frag = frag.replace(/%PRECISION%/gi, precision)\r\n            .replace(/%PIXEL_LINE%/gi, pixelLineFunc[pixelLine])\r\n            .replace(/%PIXEL_COVERAGE%/gi, pixelCoverage)\r\n            .replace(/%MAX_TEXTURES%/gi, `${maxTextures}`)\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            .replace(/%FOR_LOOP%/gi, SmoothGraphicsShader.generateSampleSrc(maxTextures));\r\n\r\n        super(vert, frag);\r\n        this.settings = settings;\r\n    }\r\n}\r\n\r\nexport class SmoothGraphicsShader extends Shader\r\n{\r\n    settings: IGraphicsBatchSettings;\r\n\r\n    constructor(settings: IGraphicsBatchSettings, prog = new SmoothGraphicsProgram(settings), uniforms = {})\r\n    {\r\n        const { maxStyles, maxTextures } = settings;\r\n        const sampleValues = new Int32Array(maxTextures);\r\n\r\n        for (let i = 0; i < maxTextures; i++)\r\n        {\r\n            sampleValues[i] = i;\r\n        }\r\n        super(prog, (Object as any).assign(uniforms, {\r\n            styleMatrix: new Float32Array(6 * maxStyles),\r\n            styleTextureId: new Float32Array(maxStyles),\r\n            styleLine: new Float32Array(2 * maxStyles),\r\n            samplerSize: new Float32Array(2 * maxTextures),\r\n            uSamplers: sampleValues,\r\n            tint: new Float32Array([1, 1, 1, 1]),\r\n            resolution: 1,\r\n            expand: 1,\r\n        }));\r\n        this.settings = settings;\r\n    }\r\n\r\n    static generateSampleSrc(maxTextures: number): string\r\n    {\r\n        let src = '';\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        for (let i = 0; i < maxTextures; i++)\r\n        {\r\n            if (i > 0)\r\n            {\r\n                src += '\\nelse ';\r\n            }\r\n\r\n            if (i < maxTextures - 1)\r\n            {\r\n                src += `if(textureId < ${i}.5)`;\r\n            }\r\n\r\n            src += '\\n{';\r\n            src += `\\n\\ttexColor = texture2D(uSamplers[${i}], vTextureCoord);`;\r\n            src += '\\n}';\r\n        }\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        return src;\r\n    }\r\n}\r\n"],"names":["verts"],"mappings":";kkOAuPA,uBAEA,gCAGAA,uBAEA,oDAMAA,8BACAA,gCACAA,gCACAA,gCACAA,8BACAA,gCACAA,gCACAA,gCACAA,8BACAA,gCACAA,gCACAA,gCACAA,iCACAA,mCACAA,mCACAA,qCACAA,kCACAA,oCAEAA,6jGChRA,mCAOA,snCCPA,g9XCJA"}